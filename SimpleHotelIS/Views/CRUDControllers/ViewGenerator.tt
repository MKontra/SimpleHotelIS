<#@ template language="C#" hostspecific="True" debug="True" #>
<#@ output extension=".txt" #>
<#@ include file="T4Toolbox.tt" #>
<#@ include file="Create.tt" #>
<#@ include file="Delete.tt" #>
<#@ include file="List.tt" #>
<#@ include file="Update.tt" #>
<#@ include file="Detail.tt" #>
<#@ Import Namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ include file="EF.Utility.CS.ttinclude" #>
<#

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);

string inputFile = Host.ResolvePath(@"../../Models/hotelModel.edmx");
string entitiesNamespace = @"SimpleHotelIS.Models";
string entitiesDtosNamespace = @"SimpleHotelIS.DTO";

EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
string namespaceName = code.VsNamespaceSuggestion();

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);
WriteHeader(fileManager);
fileManager.Process();

foreach ( var entity in ItemCollection.GetItems<EntityType>() )
{
	var createTempl = new Create( entity );
    var deleteTempl = new Delete( entity );
    var detailTempl = new Detail( entity );
    var   listTempl = new List( entity );
    var updateTempl = new Update( entity );

    createTempl.RenderToFile(entity.Name + "\\Create.cshtml");
    deleteTempl.RenderToFile(entity.Name + "\\Delete.cshtml");  
    detailTempl.RenderToFile(entity.Name + "\\Detail.cshtml");                                                                                                                                        
      listTempl.RenderToFile(entity.Name + "\\List.cshtml");
    updateTempl.RenderToFile(entity.Name + "\\Update.cshtml");                                                                                                                                                                                                                                                                                                                                                                                                               
}
#>

<#+
public class TableTemplate : Template
{
    public override string TransformText()
    {
#>
Hello
<#+
        return this.GenerationEnvironment.ToString();
    }
}
#>


<#+
void WriteHeader(EntityFrameworkTemplateFileManager fileManager)
{
    fileManager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

<#+
    fileManager.EndBlock();
}

void BeginNamespace(string namespaceName, CodeGenerationTools code)
{
    CodeRegion region = new CodeRegion(this);
    if (!String.IsNullOrEmpty(namespaceName))
    {
#>
namespace <#=code.EscapeNamespace(namespaceName)#>
{
<#+
        PushIndent(CodeRegion.GetIndent(1));
    }
}


void EndNamespace(string namespaceName)
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();
#>
}
<#+
    }
}

void WriteProperty(CodeGenerationTools code, EdmProperty edmProperty)
{
    WriteProperty(Accessibility.ForProperty(edmProperty),
                  code.Escape(edmProperty.TypeUsage),
                  code.Escape(edmProperty),
                  code.SpaceAfter(Accessibility.ForGetter(edmProperty)),
                  code.SpaceAfter(Accessibility.ForSetter(edmProperty)));
}

void WriteNavigationProperty(CodeGenerationTools code, NavigationProperty navigationProperty)
{
    var endType = code.Escape(navigationProperty.ToEndMember.GetEntityType());
    var endTypeKey = code.Escape(navigationProperty.ToEndMember.GetEntityType().KeyMembers.First().TypeUsage
    WriteProperty(PropertyVirtualModifier(Accessibility.ForProperty(navigationProperty)),
                  navigationProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many ? ("ICollection<" + endTypeKey + ">") : endTypeKey,
                  code.Escape(navigationProperty),
                  code.SpaceAfter(Accessibility.ForGetter(navigationProperty)),
                  code.SpaceAfter(Accessibility.ForSetter(navigationProperty)));
}

void WriteProperty(string accessibility, string type, string name, string getterAccessibility, string setterAccessibility)
{
#>
    <#=accessibility#> <#=type#> <#=name#> { <#=getterAccessibility#>get; <#=setterAccessibility#>set; }
<#+
}

string PropertyVirtualModifier(string accessibility)
{
    return accessibility + (accessibility != "private" ? " virtual" : "");
}

bool VerifyTypesAreCaseInsensitiveUnique(EdmItemCollection itemCollection)
{
    var alreadySeen = new Dictionary<string, bool>(StringComparer.OrdinalIgnoreCase);
    foreach(var type in itemCollection.GetItems<StructuralType>())
    {
        if (!(type is EntityType || type is ComplexType))
        {
            continue;
        }

        if (alreadySeen.ContainsKey(type.FullName))
        {
            Error(String.Format(CultureInfo.CurrentCulture, "This template does not support types that differ only by case, the types {0} are not supported", type.FullName));
            return false;
        }
        else
        {
            alreadySeen.Add(type.FullName, true);
        }
    }

    return true;
}
#>

