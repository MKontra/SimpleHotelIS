<#@ template language="C#" hostspecific="True" debug="True" #>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ output extension=".cs"#><#

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);

string inputFile = Host.ResolvePath(@"../Models/hotelModel.edmx");
string entitiesNamespace = @"SimpleHotelIS.Models";
string entitiesDtosNamespace = @"SimpleHotelIS.DTO";

EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
string namespaceName = code.VsNamespaceSuggestion();

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);
WriteHeader(fileManager);

foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{
    fileManager.StartNewFile(entity.Name + "Controller.cs");
    BeginNamespace(namespaceName, code);	
#>
#pragma warning disable 1573
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Web.Http;
using System.Web;
using <#= entitiesNamespace#>;
using <#= entitiesDtosNamespace#>;
using SimpleHotelIS.BussinesPipelines;

<#=Accessibility.ForType(entity)#> <#=code.SpaceAfter(code.AbstractOption(entity))#>partial class <#=code.Escape(entity)#>Controller <#=code.StringBefore(" : ", code.Escape(entity.BaseType))#> : ApiController
{
<#
    
	var nonNavigationalProperties = entity.Properties;
	var propertiesWithDefaultValues = entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity && p.DefaultValue != null);
    var collectionNavigationProperties = entity.NavigationProperties.Where(np => np.DeclaringType == entity && np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many);
    var complexProperties = entity.Properties.Where(p => p.TypeUsage.EdmType is ComplexType && p.DeclaringType == entity);
#>

    	private ICrudServiceProvider icsp;
    
    	public <#=code.Escape(entity)#>Controller
    		(
    			ICrudServiceProvider icsp
    		)
    	{
    		this.icsp = icsp;
    	}

        public IEnumerable<<#=code.Escape(entity)#>DTO> Get()
    	{
            return icsp.GetAsQueryableService<<#=code.Escape(entity)#>, <#=code.Escape(entity)#>DTO>().invoke(this).Take(10);
    	}
    
    	public <#=code.Escape(entity)#>DTO GetById(int id)
    	{
            return icsp.GetByIdService<<#=code.Escape(entity)#>, <#=code.Escape(entity)#>DTO>().invoke(this, id);
    	}
    
    	[Queryable]
    	public IQueryable<<#=code.Escape(entity)#>DTO> GetQueryable()
    	{
            return icsp.GetAsQueryableService<<#=code.Escape(entity)#>, <#=code.Escape(entity)#>DTO>().invoke(this);
    	}
    
    	public System.Net.Http.HttpResponseMessage Post(<#=code.Escape(entity)#>DTO dto)
    	{
            icsp.GetCreateService<<#=code.Escape(entity)#>, <#=code.Escape(entity)#>DTO>().Invoke(this, dto);
            return new System.Net.Http.HttpResponseMessage(HttpStatusCode.NoContent);
    	}
    
    	public System.Net.Http.HttpResponseMessage Put(<#=code.Escape(entity)#>DTO dto)
    	{
            icsp.GetUpdateService<<#=code.Escape(entity)#>, <#=code.Escape(entity)#>DTO>().Invoke(this, dto);
            return new System.Net.Http.HttpResponseMessage(HttpStatusCode.NoContent);
    	}
    
    	public System.Net.Http.HttpResponseMessage Delete(<#=code.Escape(entity)#>DTO dto)
    	{
            icsp.GetDeleteService<<#=code.Escape(entity)#>, <#=code.Escape(entity)#>DTO>().Invoke(this, dto);
            return new System.Net.Http.HttpResponseMessage(HttpStatusCode.NoContent);
    	}
    
    	public System.Net.Http.HttpResponseMessage Delete(int id)
    	{
            icsp.GetDeleteService<<#=code.Escape(entity)#>, <#=code.Escape(entity)#>DTO>().Invoke(this, new <#=code.Escape(entity)#>DTO { Id = id });
            return new System.Net.Http.HttpResponseMessage(HttpStatusCode.NoContent);
    	}
}
<#
    EndNamespace(namespaceName);
}

fileManager.Process();

#>
<#+
void WriteHeader(EntityFrameworkTemplateFileManager fileManager)
{
    fileManager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

<#+
    fileManager.EndBlock();
}

void BeginNamespace(string namespaceName, CodeGenerationTools code)
{
    CodeRegion region = new CodeRegion(this);
    if (!String.IsNullOrEmpty(namespaceName))
    {
#>
namespace <#=code.EscapeNamespace(namespaceName)#>
{
<#+
        PushIndent(CodeRegion.GetIndent(1));
    }
}


void EndNamespace(string namespaceName)
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();
#>
}
<#+
    }
}

void WriteProperty(CodeGenerationTools code, EdmProperty edmProperty)
{
    WriteProperty(Accessibility.ForProperty(edmProperty),
                  code.Escape(edmProperty.TypeUsage),
                  code.Escape(edmProperty),
                  code.SpaceAfter(Accessibility.ForGetter(edmProperty)),
                  code.SpaceAfter(Accessibility.ForSetter(edmProperty)));
}

void WriteNavigationProperty(CodeGenerationTools code, NavigationProperty navigationProperty)
{
    var endType = code.Escape(navigationProperty.ToEndMember.GetEntityType());
    var endTypeKey = code.Escape(navigationProperty.ToEndMember.GetEntityType().KeyMembers.First().TypeUsage
    WriteProperty(PropertyVirtualModifier(Accessibility.ForProperty(navigationProperty)),
                  navigationProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many ? ("ICollection<" + endTypeKey + ">") : endTypeKey,
                  code.Escape(navigationProperty),
                  code.SpaceAfter(Accessibility.ForGetter(navigationProperty)),
                  code.SpaceAfter(Accessibility.ForSetter(navigationProperty)));
}

void WriteProperty(string accessibility, string type, string name, string getterAccessibility, string setterAccessibility)
{
#>
    <#=accessibility#> <#=type#> <#=name#> { <#=getterAccessibility#>get; <#=setterAccessibility#>set; }
<#+
}

string PropertyVirtualModifier(string accessibility)
{
    return accessibility + (accessibility != "private" ? " virtual" : "");
}

bool VerifyTypesAreCaseInsensitiveUnique(EdmItemCollection itemCollection)
{
    var alreadySeen = new Dictionary<string, bool>(StringComparer.OrdinalIgnoreCase);
    foreach(var type in itemCollection.GetItems<StructuralType>())
    {
        if (!(type is EntityType || type is ComplexType))
        {
            continue;
        }

        if (alreadySeen.ContainsKey(type.FullName))
        {
            Error(String.Format(CultureInfo.CurrentCulture, "This template does not support types that differ only by case, the types {0} are not supported", type.FullName));
            return false;
        }
        else
        {
            alreadySeen.Add(type.FullName, true);
        }
    }

    return true;
}
#>

